import numpy as np
import matplotlib.pyplot as plt
from scipy.special import gamma
from mpl_toolkits import mplot3d

def W(x, y, z, h):

    r = np.sqrt(x ** 2 + y ** 2 + z ** 2)

    w = (1.0 / (h * np.sqrt(np.pi))) ** 3 * np.exp(-r ** 2 / h ** 2)

    return w


def gradW(x, y, z, h):

    r = np.sqrt(x ** 2 + y ** 2 + z ** 2)

    n = -2 * np.exp(-r ** 2 / h ** 2) / h ** 5 / (np.pi) ** (3 / 2)
    wx = n * x
    wy = n * y
    wz = n * z

    return wx, wy, wz


def getPairwiseSeparations(ri, rj):

    M = ri.shape[0]
    N = rj.shape[0]

    # positions ri = (x,y,z)
    rix = ri[:, 0].reshape((M, 1))
    riy = ri[:, 1].reshape((M, 1))
    riz = ri[:, 2].reshape((M, 1))

    # other set of points positions rj = (x,y,z)
    rjx = rj[:, 0].reshape((N, 1))
    rjy = rj[:, 1].reshape((N, 1))
    rjz = rj[:, 2].reshape((N, 1))

    # matrices that store all pairwise particle separations: r_i - r_j
    dx = rix - rjx.T
    dy = riy - rjy.T
    dz = riz - rjz.T

    return dx, dy, dz


def getDensity(r, pos, m, h):

    M = r.shape[0]

    dx, dy, dz = getPairwiseSeparations(r, pos);

    rho = np.sum(m * W(dx, dy, dz, h), 1).reshape((M, 1))

    return rho


def getPressure(rho, k, n):

    P = k * rho ** (1 + 1 / n)

    return P


def getAcc(pos, vel, m, h, k, n, lmbda, nu):

    N = pos.shape[0]

    # Calculate densities at the position of the particles
    rho = getDensity(pos, pos, m, h)

    # Get the pressures
    P = getPressure(rho, k, n)

    # Get pairwise distances and gradients
    dx, dy, dz = getPairwiseSeparations(pos, pos)
    dWx, dWy, dWz = gradW(dx, dy, dz, h)

    # Add Pressure contribution to accelerations
    ax = - np.sum(m * (P / rho ** 2 + P.T / rho.T ** 2) * dWx, 1).reshape((N, 1))
    ay = - np.sum(m * (P / rho ** 2 + P.T / rho.T ** 2) * dWy, 1).reshape((N, 1))
    az = - np.sum(m * (P / rho ** 2 + P.T / rho.T ** 2) * dWz, 1).reshape((N, 1))

    # pack together the acceleration components
    a = np.hstack((ax, ay, az))

    # Add external potential force
    a -= lmbda * pos

    # Add viscosity
    a -= nu * vel

    return a


def main():

    N = 300
    t = 0
    tEnd = 16
    dt = 0.04
    M = 2
    R = 0.75
    h = 0.1
    k = 0.1
    n = 1
    nu = 1
    plotRealTime = True


    np.random.seed(42)

    lmbda = 2 * k * (1 + n) * np.pi ** (-3 / (2 * n)) * (M * gamma(5 / 2 + n) / R ** 3 / gamma(1 + n)) ** (
                1 / n) / R ** 2
    m = M / N
    pos = np.random.randn(N, 3)
    vel = np.zeros(pos.shape)

    acc = getAcc(pos, vel, m, h, k, n, lmbda, nu)

    Nt = int(np.ceil(tEnd / dt))

    fig = plt.figure()
    ax = plt.axes(projection='3d')

    for i in range(Nt):

        vel += acc * dt / 2

        pos += vel * dt

        acc = getAcc(pos, vel, m, h, k, n, lmbda, nu)

        vel += acc * dt / 2

        t += dt

        rho = getDensity(pos, pos, m, h)

        if plotRealTime or (i == Nt - 1):

            plt.cla()
            ax.scatter3D(pos[:, 0], pos[:, 1], pos[:,  2], c=pos[:, 2], cmap='Oranges')
            ax.set(xlim=(-1.5, 1.5), ylim=(-1.5, 1.5), zlim=(-1.5, 1.5))
            plt.pause(0.001)


    plt.show()

    return 0


if __name__ == "__main__":
    main()
